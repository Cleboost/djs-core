import { readdirSync, existsSync } from "fs";
import { promises as fs } from "fs";
import { resolve, extname, relative } from "path";
import { build as tsupBuild } from "tsup";

function collectFiles(dir: string, matcher: (file: string) => boolean, acc: string[]) {
  for (const entry of readdirSync(dir, { withFileTypes: true })) {
    const full = resolve(dir, entry.name);
    if (entry.isDirectory()) {
      collectFiles(full, matcher, acc);
    } else if (entry.isFile() && matcher(full)) {
      acc.push(full);
    }
  }
}

const DIRECTORIES = {
  commands: "src/commands",
  events: "src/events",
  buttons: "src/buttons",
} as const;

const VALID_EXT: string[] = [".ts", ".js", ".mjs", ".cjs"];
const GENERATED_DIR = ".djs-generated";

function collectAndImportFiles(
  root: string,
  dir: string,
  prefix: string,
  files: string[],
  importLines: string[],
  vars: string[],
  instantiate = false,
) {
  if (!existsSync(dir)) return;
  collectFiles(dir, (f) => VALID_EXT.includes(extname(f)), files);
  files.forEach((file, idx) => {
    const rel = "../" + relative(root, file).replace(/\\/g, "/");
    const varName = `${prefix}${idx}`;
    importLines.push(`import ${varName} from "${rel}";`);
    vars.push(instantiate ? `new ${varName}()` : varName);
  });
}

export async function runBuild(projectRoot: string, opts: { docker?: boolean; js?: boolean } = {}) {
  const root = resolve(process.cwd(), projectRoot ?? ".");

  const commandFiles: string[] = [];
  const eventFiles: string[] = [];
  const buttonFiles: string[] = [];

  const importLines: string[] = [];
  const commandVars: string[] = [];
  const eventVars: string[] = [];
  const buttonVars: string[] = [];

  collectAndImportFiles(root, resolve(root, DIRECTORIES.commands), "Cmd", commandFiles, importLines, commandVars);
  collectAndImportFiles(root, resolve(root, DIRECTORIES.events), "Evt", eventFiles, importLines, eventVars, true);
  collectAndImportFiles(root, resolve(root, DIRECTORIES.buttons), "Btn", buttonFiles, importLines, buttonVars);

  const genDir = resolve(root, GENERATED_DIR);
  await fs.mkdir(genDir, { recursive: true });
  const entryPath = resolve(genDir, "index.ts");

  const cfgFile = ["djsconfig.ts", "djsconfig.js"].find((f) => existsSync(resolve(root, f)));
  if (!cfgFile) {
    throw new Error("djsconfig.ts/js not found in project root");
  }
  const cfgImport = `import config from "../${cfgFile}";`;

  const handlerContent = `import { Client } from "discord.js";
${cfgImport}
${importLines.join("\n")}
import { registerHandlers } from "djs-core";

const client = new Client({ intents: config.intents ?? [] });

registerHandlers({
  client,
  commands: [${commandVars.join(", ")}],
  events: [${eventVars.join(", ")}],
  buttons: [${buttonVars.join(", ")}],
});

client.login(config.token);
`;

  await fs.writeFile(entryPath, handlerContent, { encoding: "utf8" });

  const distDir = resolve(root, "dist");
  const entryGlobs = [entryPath.replace(/\\/g, "/")];
  
  await tsupBuild({
    entry: entryGlobs,
    format: "esm",
    clean: true,
    minify: true,
    outDir: distDir,
    target: "es2020",
    treeshake: true,
    dts: false,
    silent: true,
    external: ["discord.js"],
  });

  try {
    const userPkgPath = resolve(root, "package.json");
    const userPkg = JSON.parse(await Bun.file(userPkgPath).text());
    const runtimeCmd = opts.js ? "node" : "bun";

    const prodPkg = {
      name: userPkg.name ?? "my-bot",
      version: userPkg.version ?? "1.0.0",
      type: "module",
      main: "index.js",
      dependencies: userPkg.dependencies ?? {},
      scripts: {
        ...Object.fromEntries(
          Object.entries(userPkg.scripts ?? {}).filter(([k]) => k !== "build")
        ),
        start: `${runtimeCmd} index.js`
      },
    };
    await fs.writeFile(resolve(distDir, "package.json"), JSON.stringify(prodPkg, null, 2));

    if (opts.docker) {
      const dockerFile = `# ---- DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING ----\nFROM oven/bun:alpine\nWORKDIR /app\nCOPY . .\nRUN bun i --production\nCMD [\"bun\", \"start\"]\n`;
      await fs.writeFile(resolve(distDir, "Dockerfile"), dockerFile);
    }
  } catch (e) {
    console.warn("⚠️  Failed to copy dependencies to dist/package.json", e);
  }

  await fs.rm(genDir, { recursive: true, force: true });

  const finalFile = resolve(distDir, "index.js");
  const sizeKB = ((await fs.stat(finalFile)).size / 1024).toFixed(2);
  const totalInputs = commandFiles.length + eventFiles.length + buttonFiles.length;

  const runtimeLabel = opts.js ? "Node.js" : "Bun";

  console.log(`✅ Build completed:
  - Commands: ${commandFiles.length}
  - Events: ${eventFiles.length}
  - Buttons: ${buttonFiles.length}
  - Total: ${totalInputs} file(s)
  - Output: dist/index.js (${sizeKB} KB)
  - Runtime: ${runtimeLabel}
  ${opts.docker ? "- Dockerfile generated" : ""}`);
}